service: lambda

frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  region: ${opt:region}
  timeout: 150
  tags:
    project: control tower

custom:
  environment:
    dev:
      us-west-2:
        vpc:
          securityGroupIds:
            - sg-0fe7
          subnetIds:
            - subnet-0a4
            - subnet-02d
    prod:
      us-west-2:
        vpc:
          securityGroupIds:
            - sg-0908
          subnetIds:
            - subnet-003
            - subnet-0d
      us-east-1:
        vpc:
          securityGroupIds:
            - sg-046
          subnetIds:
            - subnet-0b
            - subnet-00
      us-east-2:
        vpc:
          securityGroupIds:
            - sg-06
          subnetIds:
            - subnet-0f0
            - subnet-01
  pythonRequirements:
    dockerizePip: non-linux
    layer: true

resources:
  Resources:
    tgwManagerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ControlTower-TgwManager-lambda-role-${opt:region}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: ControlTower-TgwManager-logging-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/ControlTower-TgwManager-*:*'

functions:
  tgwManager:
    name: ControlTower-TgwManager
    description: Creates TGW Attachment, Association to TGW RouteTable, and Propagation
    handler: lambda_function.lambda_handler
    layers:
      - {Ref: PythonRequirementsLambdaLayer}
    role: arn:aws:iam::123456789012:role/AWSCloudFormationStackSetAdministrationRole
    environment:
      minionrole: AWSCloudFormationStackSetExecutionRole
      networking_accountid: 123456789012
      region: ${opt:region}
      sharedservices_accountid: 123456789012
    events:
      - eventBridge:
          pattern:
            source:
              - aws.ec2
            detail-type:
              - AWS API Call via CloudTrail
            detail:
              eventName:
                - CreateTransitGatewayVpcAttachment

plugins:
  - serverless-python-requirements

package:
  patterns:
    - '!venv/**'
    - '!idea/**'
    - '!node_modules/**'
    - '!package-lock.json'
    - '!package.json'
